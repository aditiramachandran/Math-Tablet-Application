# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _inaoqi
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _inaoqi.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _inaoqi.PySwigIterator_value(*args)
    def incr(*args): return _inaoqi.PySwigIterator_incr(*args)
    def decr(*args): return _inaoqi.PySwigIterator_decr(*args)
    def distance(*args): return _inaoqi.PySwigIterator_distance(*args)
    def equal(*args): return _inaoqi.PySwigIterator_equal(*args)
    def copy(*args): return _inaoqi.PySwigIterator_copy(*args)
    def next(*args): return _inaoqi.PySwigIterator_next(*args)
    def previous(*args): return _inaoqi.PySwigIterator_previous(*args)
    def advance(*args): return _inaoqi.PySwigIterator_advance(*args)
    def __eq__(*args): return _inaoqi.PySwigIterator___eq__(*args)
    def __ne__(*args): return _inaoqi.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _inaoqi.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _inaoqi.PySwigIterator___isub__(*args)
    def __add__(*args): return _inaoqi.PySwigIterator___add__(*args)
    def __sub__(*args): return _inaoqi.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _inaoqi.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _inaoqi.StringVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _inaoqi.StringVector___nonzero__(*args)
    def __len__(*args): return _inaoqi.StringVector___len__(*args)
    def pop(*args): return _inaoqi.StringVector_pop(*args)
    def __getslice__(*args): return _inaoqi.StringVector___getslice__(*args)
    def __setslice__(*args): return _inaoqi.StringVector___setslice__(*args)
    def __delslice__(*args): return _inaoqi.StringVector___delslice__(*args)
    def __delitem__(*args): return _inaoqi.StringVector___delitem__(*args)
    def __getitem__(*args): return _inaoqi.StringVector___getitem__(*args)
    def __setitem__(*args): return _inaoqi.StringVector___setitem__(*args)
    def append(*args): return _inaoqi.StringVector_append(*args)
    def empty(*args): return _inaoqi.StringVector_empty(*args)
    def size(*args): return _inaoqi.StringVector_size(*args)
    def clear(*args): return _inaoqi.StringVector_clear(*args)
    def swap(*args): return _inaoqi.StringVector_swap(*args)
    def get_allocator(*args): return _inaoqi.StringVector_get_allocator(*args)
    def begin(*args): return _inaoqi.StringVector_begin(*args)
    def end(*args): return _inaoqi.StringVector_end(*args)
    def rbegin(*args): return _inaoqi.StringVector_rbegin(*args)
    def rend(*args): return _inaoqi.StringVector_rend(*args)
    def pop_back(*args): return _inaoqi.StringVector_pop_back(*args)
    def erase(*args): return _inaoqi.StringVector_erase(*args)
    def __init__(self, *args): 
        this = _inaoqi.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _inaoqi.StringVector_push_back(*args)
    def front(*args): return _inaoqi.StringVector_front(*args)
    def back(*args): return _inaoqi.StringVector_back(*args)
    def assign(*args): return _inaoqi.StringVector_assign(*args)
    def resize(*args): return _inaoqi.StringVector_resize(*args)
    def insert(*args): return _inaoqi.StringVector_insert(*args)
    def reserve(*args): return _inaoqi.StringVector_reserve(*args)
    def capacity(*args): return _inaoqi.StringVector_capacity(*args)
    __swig_destroy__ = _inaoqi.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _inaoqi.StringVector_swigregister
StringVector_swigregister(StringVector)

setInstance = _inaoqi.setInstance
getMemoryProxy = _inaoqi.getMemoryProxy
_ALSystem = _inaoqi._ALSystem
class broker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, broker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, broker, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _inaoqi.new_broker(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inaoqi.delete_broker
    __del__ = lambda self : None;
    def shutdown(*args): return _inaoqi.broker_shutdown(*args)
    def isModulePresent(*args): return _inaoqi.broker_isModulePresent(*args)
    def getGlobalModuleList(*args): return _inaoqi.broker_getGlobalModuleList(*args)
broker_swigregister = _inaoqi.broker_swigregister
broker_swigregister(broker)

class baseModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, baseModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, baseModule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _inaoqi.new_baseModule(*args)
        try: self.this.append(this)
        except: self.this = this
    def BIND_PYTHON(*args): return _inaoqi.baseModule_BIND_PYTHON(*args)
    def _bindWithParam(*args): return _inaoqi.baseModule__bindWithParam(*args)
    def exit(*args): return _inaoqi.baseModule_exit(*args)
    def getName(*args): return _inaoqi.baseModule_getName(*args)
    def getBrokerName(*args): return _inaoqi.baseModule_getBrokerName(*args)
    def setModuleDescription(*args): return _inaoqi.baseModule_setModuleDescription(*args)
    def addParam(*args): return _inaoqi.baseModule_addParam(*args)
    def functionName(*args): return _inaoqi.baseModule_functionName(*args)
    def autoBind(*args): return _inaoqi.baseModule_autoBind(*args)
    def _methodMissing0(*args): return _inaoqi.baseModule__methodMissing0(*args)
    def _methodMissing1(*args): return _inaoqi.baseModule__methodMissing1(*args)
    def _methodMissing2(*args): return _inaoqi.baseModule__methodMissing2(*args)
    def _methodMissing3(*args): return _inaoqi.baseModule__methodMissing3(*args)
    def _methodMissing4(*args): return _inaoqi.baseModule__methodMissing4(*args)
    def _methodMissing5(*args): return _inaoqi.baseModule__methodMissing5(*args)
    def _methodMissing6(*args): return _inaoqi.baseModule__methodMissing6(*args)
    def _methodMissing(*args): return _inaoqi.baseModule__methodMissing(*args)
    def version(*args): return _inaoqi.baseModule_version(*args)
    __swig_destroy__ = _inaoqi.delete_baseModule
    __del__ = lambda self : None;
baseModule_swigregister = _inaoqi.baseModule_swigregister
baseModule_swigregister(baseModule)

class module(baseModule):
    __swig_setmethods__ = {}
    for _s in [baseModule]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, module, name, value)
    __swig_getmethods__ = {}
    for _s in [baseModule]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, module, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _inaoqi.new_module(*args)
        try: self.this.append(this)
        except: self.this = this
    def BIND_PYTHON(*args): return _inaoqi.module_BIND_PYTHON(*args)
    def exit(*args): return _inaoqi.module_exit(*args)
    def getName(*args): return _inaoqi.module_getName(*args)
    def getBrokerName(*args): return _inaoqi.module_getBrokerName(*args)
    def _methodMissing(*args): return _inaoqi.module__methodMissing(*args)
    def version(*args): return _inaoqi.module_version(*args)
    __swig_destroy__ = _inaoqi.delete_module
    __del__ = lambda self : None;
module_swigregister = _inaoqi.module_swigregister
module_swigregister(module)

class timeline(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, timeline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, timeline, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _inaoqi.new_timeline(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inaoqi.delete_timeline
    __del__ = lambda self : None;
    def play(*args): return _inaoqi.timeline_play(*args)
    def pause(*args): return _inaoqi.timeline_pause(*args)
    def stop(*args): return _inaoqi.timeline_stop(*args)
    def goTo(*args): return _inaoqi.timeline_goTo(*args)
    def getSize(*args): return _inaoqi.timeline_getSize(*args)
    def getFPS(*args): return _inaoqi.timeline_getFPS(*args)
    def setFPS(*args): return _inaoqi.timeline_setFPS(*args)
timeline_swigregister = _inaoqi.timeline_swigregister
timeline_swigregister(timeline)

class behavior(baseModule):
    __swig_setmethods__ = {}
    for _s in [baseModule]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, behavior, name, value)
    __swig_getmethods__ = {}
    for _s in [baseModule]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, behavior, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _inaoqi.new_behavior(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inaoqi.delete_behavior
    __del__ = lambda self : None;
    def setEnabled(*args): return _inaoqi.behavior_setEnabled(*args)
    def isEnabled(*args): return _inaoqi.behavior_isEnabled(*args)
    def setResources(*args): return _inaoqi.behavior_setResources(*args)
    def waitFor(*args): return _inaoqi.behavior_waitFor(*args)
    def waitResourcesCallback(*args): return _inaoqi.behavior_waitResourcesCallback(*args)
    def isResourceFree(*args): return _inaoqi.behavior_isResourceFree(*args)
    def waitResourceFree(*args): return _inaoqi.behavior_waitResourceFree(*args)
    def waitResources(*args): return _inaoqi.behavior_waitResources(*args)
    def releaseResource(*args): return _inaoqi.behavior_releaseResource(*args)
    def addInput(*args): return _inaoqi.behavior_addInput(*args)
    def addOutput(*args): return _inaoqi.behavior_addOutput(*args)
    def addParameter(*args): return _inaoqi.behavior_addParameter(*args)
    def getParameter(*args): return _inaoqi.behavior_getParameter(*args)
    def getParametersList(*args): return _inaoqi.behavior_getParametersList(*args)
    def setParameter(*args): return _inaoqi.behavior_setParameter(*args)
    def stimulateIO(*args): return _inaoqi.behavior_stimulateIO(*args)
    def BIND_PYTHON(*args): return _inaoqi.behavior_BIND_PYTHON(*args)
    def setModuleDescription(*args): return _inaoqi.behavior_setModuleDescription(*args)
    def addParam(*args): return _inaoqi.behavior_addParam(*args)
    def exit(*args): return _inaoqi.behavior_exit(*args)
    def getName(*args): return _inaoqi.behavior_getName(*args)
    def getBrokerName(*args): return _inaoqi.behavior_getBrokerName(*args)
    def _methodMissing(*args): return _inaoqi.behavior__methodMissing(*args)
    def version(*args): return _inaoqi.behavior_version(*args)
    def hasTimeline(*args): return _inaoqi.behavior_hasTimeline(*args)
    def getTimeline(*args): return _inaoqi.behavior_getTimeline(*args)
    def hasParentTimeline(*args): return _inaoqi.behavior_hasParentTimeline(*args)
    def getParentTimeline(*args): return _inaoqi.behavior_getParentTimeline(*args)
behavior_swigregister = _inaoqi.behavior_swigregister
behavior_swigregister(behavior)

class proxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, proxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, proxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _inaoqi.new_proxy(*args)
        try: self.this.append(this)
        except: self.this = this
    def pythonCall(*args): return _inaoqi.proxy_pythonCall(*args)
    def pythonPCall(*args): return _inaoqi.proxy_pythonPCall(*args)
    def wait(*args): return _inaoqi.proxy_wait(*args)
    def stop(*args): return _inaoqi.proxy_stop(*args)
    def isRunning(*args): return _inaoqi.proxy_isRunning(*args)
    __swig_destroy__ = _inaoqi.delete_proxy
    __del__ = lambda self : None;
proxy_swigregister = _inaoqi.proxy_swigregister
proxy_swigregister(proxy)

class ALMemoryProxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ALMemoryProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ALMemoryProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _inaoqi.new_ALMemoryProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["post"] = _inaoqi.ALMemoryProxy_post_set
    __swig_getmethods__["post"] = _inaoqi.ALMemoryProxy_post_get
    if _newclass:post = _swig_property(_inaoqi.ALMemoryProxy_post_get, _inaoqi.ALMemoryProxy_post_set)
    def getGenericProxy(*args): return _inaoqi.ALMemoryProxy_getGenericProxy(*args)
    def declareEvent(*args): return _inaoqi.ALMemoryProxy_declareEvent(*args)
    def exit(*args): return _inaoqi.ALMemoryProxy_exit(*args)
    def getBrokerName(*args): return _inaoqi.ALMemoryProxy_getBrokerName(*args)
    def getData(*args): return _inaoqi.ALMemoryProxy_getData(*args)
    def getDataList(*args): return _inaoqi.ALMemoryProxy_getDataList(*args)
    def getDataListName(*args): return _inaoqi.ALMemoryProxy_getDataListName(*args)
    def getDataOnChange(*args): return _inaoqi.ALMemoryProxy_getDataOnChange(*args)
    def getDataPtr(*args): return _inaoqi.ALMemoryProxy_getDataPtr(*args)
    def getDescriptionList(*args): return _inaoqi.ALMemoryProxy_getDescriptionList(*args)
    def getEventHistory(*args): return _inaoqi.ALMemoryProxy_getEventHistory(*args)
    def getEventList(*args): return _inaoqi.ALMemoryProxy_getEventList(*args)
    def getExtractorEvent(*args): return _inaoqi.ALMemoryProxy_getExtractorEvent(*args)
    def getListData(*args): return _inaoqi.ALMemoryProxy_getListData(*args)
    def getMethodHelp(*args): return _inaoqi.ALMemoryProxy_getMethodHelp(*args)
    def getMethodList(*args): return _inaoqi.ALMemoryProxy_getMethodList(*args)
    def getMicroEventList(*args): return _inaoqi.ALMemoryProxy_getMicroEventList(*args)
    def getModuleHelp(*args): return _inaoqi.ALMemoryProxy_getModuleHelp(*args)
    def getSubscribers(*args): return _inaoqi.ALMemoryProxy_getSubscribers(*args)
    def getTimestamp(*args): return _inaoqi.ALMemoryProxy_getTimestamp(*args)
    def getType(*args): return _inaoqi.ALMemoryProxy_getType(*args)
    def getUsage(*args): return _inaoqi.ALMemoryProxy_getUsage(*args)
    def insertData(*args): return _inaoqi.ALMemoryProxy_insertData(*args)
    def insertListData(*args): return _inaoqi.ALMemoryProxy_insertListData(*args)
    def isRunning(*args): return _inaoqi.ALMemoryProxy_isRunning(*args)
    def ping(*args): return _inaoqi.ALMemoryProxy_ping(*args)
    def raiseEvent(*args): return _inaoqi.ALMemoryProxy_raiseEvent(*args)
    def raiseMicroEvent(*args): return _inaoqi.ALMemoryProxy_raiseMicroEvent(*args)
    def removeData(*args): return _inaoqi.ALMemoryProxy_removeData(*args)
    def removeMicroEvent(*args): return _inaoqi.ALMemoryProxy_removeMicroEvent(*args)
    def setDescription(*args): return _inaoqi.ALMemoryProxy_setDescription(*args)
    def stop(*args): return _inaoqi.ALMemoryProxy_stop(*args)
    def subscribeToEvent(*args): return _inaoqi.ALMemoryProxy_subscribeToEvent(*args)
    def subscribeToMicroEvent(*args): return _inaoqi.ALMemoryProxy_subscribeToMicroEvent(*args)
    def unregisterModuleReference(*args): return _inaoqi.ALMemoryProxy_unregisterModuleReference(*args)
    def unsubscribeToEvent(*args): return _inaoqi.ALMemoryProxy_unsubscribeToEvent(*args)
    def unsubscribeToMicroEvent(*args): return _inaoqi.ALMemoryProxy_unsubscribeToMicroEvent(*args)
    def version(*args): return _inaoqi.ALMemoryProxy_version(*args)
    def wait(*args): return _inaoqi.ALMemoryProxy_wait(*args)
    __swig_destroy__ = _inaoqi.delete_ALMemoryProxy
    __del__ = lambda self : None;
ALMemoryProxy_swigregister = _inaoqi.ALMemoryProxy_swigregister
ALMemoryProxy_swigregister(ALMemoryProxy)



